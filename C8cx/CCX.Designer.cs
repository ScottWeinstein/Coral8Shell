//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace C8cx {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CCXDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CCXDataSet : global::System.Data.DataSet {
        
        private ProgramDataTable tableProgram;
        
        private CompilerInfoDataTable tableCompilerInfo;
        
        private ItemDataTable tableItem;
        
        private DirectoryDataTable tableDirectory;
        
        private SectionDataTable tableSection;
        
        private ValueDataTable tableValue;
        
        private TupleDescriptorsDataTable tableTupleDescriptors;
        
        private TupleDescriptorDataTable tableTupleDescriptor;
        
        private FieldDataTable tableField;
        
        private ModulesDataTable tableModules;
        
        private ModuleDataTable tableModule;
        
        private StreamsDataTable tableStreams;
        
        private StreamDataTable tableStream;
        
        private ConnectionDataTable tableConnection;
        
        private global::System.Data.DataRelation relationProgram_CompilerInfo;
        
        private global::System.Data.DataRelation relationCompilerInfo_Item;
        
        private global::System.Data.DataRelation relationProgram_Directory;
        
        private global::System.Data.DataRelation relationDirectory_Section;
        
        private global::System.Data.DataRelation relationSection_Value;
        
        private global::System.Data.DataRelation relationProgram_TupleDescriptors;
        
        private global::System.Data.DataRelation relationTupleDescriptors_TupleDescriptor;
        
        private global::System.Data.DataRelation relationTupleDescriptor_Field;
        
        private global::System.Data.DataRelation relationProgram_Modules;
        
        private global::System.Data.DataRelation relationModules_Module;
        
        private global::System.Data.DataRelation relationModule_Streams;
        
        private global::System.Data.DataRelation relationStreams_Stream;
        
        private global::System.Data.DataRelation relationStream_Connection;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CCXDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CCXDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Program"] != null)) {
                    base.Tables.Add(new ProgramDataTable(ds.Tables["Program"]));
                }
                if ((ds.Tables["CompilerInfo"] != null)) {
                    base.Tables.Add(new CompilerInfoDataTable(ds.Tables["CompilerInfo"]));
                }
                if ((ds.Tables["Item"] != null)) {
                    base.Tables.Add(new ItemDataTable(ds.Tables["Item"]));
                }
                if ((ds.Tables["Directory"] != null)) {
                    base.Tables.Add(new DirectoryDataTable(ds.Tables["Directory"]));
                }
                if ((ds.Tables["Section"] != null)) {
                    base.Tables.Add(new SectionDataTable(ds.Tables["Section"]));
                }
                if ((ds.Tables["Value"] != null)) {
                    base.Tables.Add(new ValueDataTable(ds.Tables["Value"]));
                }
                if ((ds.Tables["TupleDescriptors"] != null)) {
                    base.Tables.Add(new TupleDescriptorsDataTable(ds.Tables["TupleDescriptors"]));
                }
                if ((ds.Tables["TupleDescriptor"] != null)) {
                    base.Tables.Add(new TupleDescriptorDataTable(ds.Tables["TupleDescriptor"]));
                }
                if ((ds.Tables["Field"] != null)) {
                    base.Tables.Add(new FieldDataTable(ds.Tables["Field"]));
                }
                if ((ds.Tables["Modules"] != null)) {
                    base.Tables.Add(new ModulesDataTable(ds.Tables["Modules"]));
                }
                if ((ds.Tables["Module"] != null)) {
                    base.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
                }
                if ((ds.Tables["Streams"] != null)) {
                    base.Tables.Add(new StreamsDataTable(ds.Tables["Streams"]));
                }
                if ((ds.Tables["Stream"] != null)) {
                    base.Tables.Add(new StreamDataTable(ds.Tables["Stream"]));
                }
                if ((ds.Tables["Connection"] != null)) {
                    base.Tables.Add(new ConnectionDataTable(ds.Tables["Connection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProgramDataTable Program {
            get {
                return this.tableProgram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompilerInfoDataTable CompilerInfo {
            get {
                return this.tableCompilerInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemDataTable Item {
            get {
                return this.tableItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DirectoryDataTable Directory {
            get {
                return this.tableDirectory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SectionDataTable Section {
            get {
                return this.tableSection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ValueDataTable Value {
            get {
                return this.tableValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TupleDescriptorsDataTable TupleDescriptors {
            get {
                return this.tableTupleDescriptors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TupleDescriptorDataTable TupleDescriptor {
            get {
                return this.tableTupleDescriptor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FieldDataTable Field {
            get {
                return this.tableField;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModulesDataTable Modules {
            get {
                return this.tableModules;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModuleDataTable Module {
            get {
                return this.tableModule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StreamsDataTable Streams {
            get {
                return this.tableStreams;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StreamDataTable Stream {
            get {
                return this.tableStream;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionDataTable Connection {
            get {
                return this.tableConnection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CCXDataSet cln = ((CCXDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Program"] != null)) {
                    base.Tables.Add(new ProgramDataTable(ds.Tables["Program"]));
                }
                if ((ds.Tables["CompilerInfo"] != null)) {
                    base.Tables.Add(new CompilerInfoDataTable(ds.Tables["CompilerInfo"]));
                }
                if ((ds.Tables["Item"] != null)) {
                    base.Tables.Add(new ItemDataTable(ds.Tables["Item"]));
                }
                if ((ds.Tables["Directory"] != null)) {
                    base.Tables.Add(new DirectoryDataTable(ds.Tables["Directory"]));
                }
                if ((ds.Tables["Section"] != null)) {
                    base.Tables.Add(new SectionDataTable(ds.Tables["Section"]));
                }
                if ((ds.Tables["Value"] != null)) {
                    base.Tables.Add(new ValueDataTable(ds.Tables["Value"]));
                }
                if ((ds.Tables["TupleDescriptors"] != null)) {
                    base.Tables.Add(new TupleDescriptorsDataTable(ds.Tables["TupleDescriptors"]));
                }
                if ((ds.Tables["TupleDescriptor"] != null)) {
                    base.Tables.Add(new TupleDescriptorDataTable(ds.Tables["TupleDescriptor"]));
                }
                if ((ds.Tables["Field"] != null)) {
                    base.Tables.Add(new FieldDataTable(ds.Tables["Field"]));
                }
                if ((ds.Tables["Modules"] != null)) {
                    base.Tables.Add(new ModulesDataTable(ds.Tables["Modules"]));
                }
                if ((ds.Tables["Module"] != null)) {
                    base.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
                }
                if ((ds.Tables["Streams"] != null)) {
                    base.Tables.Add(new StreamsDataTable(ds.Tables["Streams"]));
                }
                if ((ds.Tables["Stream"] != null)) {
                    base.Tables.Add(new StreamDataTable(ds.Tables["Stream"]));
                }
                if ((ds.Tables["Connection"] != null)) {
                    base.Tables.Add(new ConnectionDataTable(ds.Tables["Connection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProgram = ((ProgramDataTable)(base.Tables["Program"]));
            if ((initTable == true)) {
                if ((this.tableProgram != null)) {
                    this.tableProgram.InitVars();
                }
            }
            this.tableCompilerInfo = ((CompilerInfoDataTable)(base.Tables["CompilerInfo"]));
            if ((initTable == true)) {
                if ((this.tableCompilerInfo != null)) {
                    this.tableCompilerInfo.InitVars();
                }
            }
            this.tableItem = ((ItemDataTable)(base.Tables["Item"]));
            if ((initTable == true)) {
                if ((this.tableItem != null)) {
                    this.tableItem.InitVars();
                }
            }
            this.tableDirectory = ((DirectoryDataTable)(base.Tables["Directory"]));
            if ((initTable == true)) {
                if ((this.tableDirectory != null)) {
                    this.tableDirectory.InitVars();
                }
            }
            this.tableSection = ((SectionDataTable)(base.Tables["Section"]));
            if ((initTable == true)) {
                if ((this.tableSection != null)) {
                    this.tableSection.InitVars();
                }
            }
            this.tableValue = ((ValueDataTable)(base.Tables["Value"]));
            if ((initTable == true)) {
                if ((this.tableValue != null)) {
                    this.tableValue.InitVars();
                }
            }
            this.tableTupleDescriptors = ((TupleDescriptorsDataTable)(base.Tables["TupleDescriptors"]));
            if ((initTable == true)) {
                if ((this.tableTupleDescriptors != null)) {
                    this.tableTupleDescriptors.InitVars();
                }
            }
            this.tableTupleDescriptor = ((TupleDescriptorDataTable)(base.Tables["TupleDescriptor"]));
            if ((initTable == true)) {
                if ((this.tableTupleDescriptor != null)) {
                    this.tableTupleDescriptor.InitVars();
                }
            }
            this.tableField = ((FieldDataTable)(base.Tables["Field"]));
            if ((initTable == true)) {
                if ((this.tableField != null)) {
                    this.tableField.InitVars();
                }
            }
            this.tableModules = ((ModulesDataTable)(base.Tables["Modules"]));
            if ((initTable == true)) {
                if ((this.tableModules != null)) {
                    this.tableModules.InitVars();
                }
            }
            this.tableModule = ((ModuleDataTable)(base.Tables["Module"]));
            if ((initTable == true)) {
                if ((this.tableModule != null)) {
                    this.tableModule.InitVars();
                }
            }
            this.tableStreams = ((StreamsDataTable)(base.Tables["Streams"]));
            if ((initTable == true)) {
                if ((this.tableStreams != null)) {
                    this.tableStreams.InitVars();
                }
            }
            this.tableStream = ((StreamDataTable)(base.Tables["Stream"]));
            if ((initTable == true)) {
                if ((this.tableStream != null)) {
                    this.tableStream.InitVars();
                }
            }
            this.tableConnection = ((ConnectionDataTable)(base.Tables["Connection"]));
            if ((initTable == true)) {
                if ((this.tableConnection != null)) {
                    this.tableConnection.InitVars();
                }
            }
            this.relationProgram_CompilerInfo = this.Relations["Program_CompilerInfo"];
            this.relationCompilerInfo_Item = this.Relations["CompilerInfo_Item"];
            this.relationProgram_Directory = this.Relations["Program_Directory"];
            this.relationDirectory_Section = this.Relations["Directory_Section"];
            this.relationSection_Value = this.Relations["Section_Value"];
            this.relationProgram_TupleDescriptors = this.Relations["Program_TupleDescriptors"];
            this.relationTupleDescriptors_TupleDescriptor = this.Relations["TupleDescriptors_TupleDescriptor"];
            this.relationTupleDescriptor_Field = this.Relations["TupleDescriptor_Field"];
            this.relationProgram_Modules = this.Relations["Program_Modules"];
            this.relationModules_Module = this.Relations["Modules_Module"];
            this.relationModule_Streams = this.Relations["Module_Streams"];
            this.relationStreams_Stream = this.Relations["Streams_Stream"];
            this.relationStream_Connection = this.Relations["Stream_Connection"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CCXDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.coral8.com/cpx/2004/03/";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProgram = new ProgramDataTable();
            base.Tables.Add(this.tableProgram);
            this.tableCompilerInfo = new CompilerInfoDataTable();
            base.Tables.Add(this.tableCompilerInfo);
            this.tableItem = new ItemDataTable();
            base.Tables.Add(this.tableItem);
            this.tableDirectory = new DirectoryDataTable();
            base.Tables.Add(this.tableDirectory);
            this.tableSection = new SectionDataTable();
            base.Tables.Add(this.tableSection);
            this.tableValue = new ValueDataTable();
            base.Tables.Add(this.tableValue);
            this.tableTupleDescriptors = new TupleDescriptorsDataTable();
            base.Tables.Add(this.tableTupleDescriptors);
            this.tableTupleDescriptor = new TupleDescriptorDataTable();
            base.Tables.Add(this.tableTupleDescriptor);
            this.tableField = new FieldDataTable();
            base.Tables.Add(this.tableField);
            this.tableModules = new ModulesDataTable();
            base.Tables.Add(this.tableModules);
            this.tableModule = new ModuleDataTable();
            base.Tables.Add(this.tableModule);
            this.tableStreams = new StreamsDataTable();
            base.Tables.Add(this.tableStreams);
            this.tableStream = new StreamDataTable();
            base.Tables.Add(this.tableStream);
            this.tableConnection = new ConnectionDataTable();
            base.Tables.Add(this.tableConnection);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("Program_CompilerInfo", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCompilerInfo.Program_IdColumn});
            this.tableCompilerInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CompilerInfo_Item", new global::System.Data.DataColumn[] {
                        this.tableCompilerInfo.CompilerInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableItem.CompilerInfo_IdColumn});
            this.tableItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Program_Directory", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDirectory.Program_IdColumn});
            this.tableDirectory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Directory_Section", new global::System.Data.DataColumn[] {
                        this.tableDirectory.Directory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSection.Directory_IdColumn});
            this.tableSection.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Section_Value", new global::System.Data.DataColumn[] {
                        this.tableSection.Section_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableValue.Section_IdColumn});
            this.tableValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Program_TupleDescriptors", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptors.Program_IdColumn});
            this.tableTupleDescriptors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TupleDescriptors_TupleDescriptor", new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptors.TupleDescriptors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptor.TupleDescriptors_IdColumn});
            this.tableTupleDescriptor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TupleDescriptor_Field", new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptor.TupleDescriptor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableField.TupleDescriptor_IdColumn});
            this.tableField.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Program_Modules", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModules.Program_IdColumn});
            this.tableModules.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Modules_Module", new global::System.Data.DataColumn[] {
                        this.tableModules.Modules_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModule.Modules_IdColumn});
            this.tableModule.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Module_Streams", new global::System.Data.DataColumn[] {
                        this.tableModule.Module_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStreams.Module_IdColumn});
            this.tableStreams.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Streams_Stream", new global::System.Data.DataColumn[] {
                        this.tableStreams.Streams_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStream.Streams_IdColumn});
            this.tableStream.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Stream_Connection", new global::System.Data.DataColumn[] {
                        this.tableStream.Stream_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConnection.Stream_IdColumn});
            this.tableConnection.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationProgram_CompilerInfo = new global::System.Data.DataRelation("Program_CompilerInfo", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCompilerInfo.Program_IdColumn}, false);
            this.relationProgram_CompilerInfo.Nested = true;
            this.Relations.Add(this.relationProgram_CompilerInfo);
            this.relationCompilerInfo_Item = new global::System.Data.DataRelation("CompilerInfo_Item", new global::System.Data.DataColumn[] {
                        this.tableCompilerInfo.CompilerInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableItem.CompilerInfo_IdColumn}, false);
            this.relationCompilerInfo_Item.Nested = true;
            this.Relations.Add(this.relationCompilerInfo_Item);
            this.relationProgram_Directory = new global::System.Data.DataRelation("Program_Directory", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDirectory.Program_IdColumn}, false);
            this.relationProgram_Directory.Nested = true;
            this.Relations.Add(this.relationProgram_Directory);
            this.relationDirectory_Section = new global::System.Data.DataRelation("Directory_Section", new global::System.Data.DataColumn[] {
                        this.tableDirectory.Directory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSection.Directory_IdColumn}, false);
            this.relationDirectory_Section.Nested = true;
            this.Relations.Add(this.relationDirectory_Section);
            this.relationSection_Value = new global::System.Data.DataRelation("Section_Value", new global::System.Data.DataColumn[] {
                        this.tableSection.Section_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableValue.Section_IdColumn}, false);
            this.relationSection_Value.Nested = true;
            this.Relations.Add(this.relationSection_Value);
            this.relationProgram_TupleDescriptors = new global::System.Data.DataRelation("Program_TupleDescriptors", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptors.Program_IdColumn}, false);
            this.relationProgram_TupleDescriptors.Nested = true;
            this.Relations.Add(this.relationProgram_TupleDescriptors);
            this.relationTupleDescriptors_TupleDescriptor = new global::System.Data.DataRelation("TupleDescriptors_TupleDescriptor", new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptors.TupleDescriptors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptor.TupleDescriptors_IdColumn}, false);
            this.relationTupleDescriptors_TupleDescriptor.Nested = true;
            this.Relations.Add(this.relationTupleDescriptors_TupleDescriptor);
            this.relationTupleDescriptor_Field = new global::System.Data.DataRelation("TupleDescriptor_Field", new global::System.Data.DataColumn[] {
                        this.tableTupleDescriptor.TupleDescriptor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableField.TupleDescriptor_IdColumn}, false);
            this.relationTupleDescriptor_Field.Nested = true;
            this.Relations.Add(this.relationTupleDescriptor_Field);
            this.relationProgram_Modules = new global::System.Data.DataRelation("Program_Modules", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModules.Program_IdColumn}, false);
            this.relationProgram_Modules.Nested = true;
            this.Relations.Add(this.relationProgram_Modules);
            this.relationModules_Module = new global::System.Data.DataRelation("Modules_Module", new global::System.Data.DataColumn[] {
                        this.tableModules.Modules_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModule.Modules_IdColumn}, false);
            this.relationModules_Module.Nested = true;
            this.Relations.Add(this.relationModules_Module);
            this.relationModule_Streams = new global::System.Data.DataRelation("Module_Streams", new global::System.Data.DataColumn[] {
                        this.tableModule.Module_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStreams.Module_IdColumn}, false);
            this.relationModule_Streams.Nested = true;
            this.Relations.Add(this.relationModule_Streams);
            this.relationStreams_Stream = new global::System.Data.DataRelation("Streams_Stream", new global::System.Data.DataColumn[] {
                        this.tableStreams.Streams_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStream.Streams_IdColumn}, false);
            this.relationStreams_Stream.Nested = true;
            this.Relations.Add(this.relationStreams_Stream);
            this.relationStream_Connection = new global::System.Data.DataRelation("Stream_Connection", new global::System.Data.DataColumn[] {
                        this.tableStream.Stream_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConnection.Stream_IdColumn}, false);
            this.relationStream_Connection.Nested = true;
            this.Relations.Add(this.relationStream_Connection);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProgram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCompilerInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDirectory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTupleDescriptors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTupleDescriptor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeField() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModules() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStreams() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStream() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CCXDataSet ds = new CCXDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProgramRowChangeEventHandler(object sender, ProgramRowChangeEvent e);
        
        public delegate void CompilerInfoRowChangeEventHandler(object sender, CompilerInfoRowChangeEvent e);
        
        public delegate void ItemRowChangeEventHandler(object sender, ItemRowChangeEvent e);
        
        public delegate void DirectoryRowChangeEventHandler(object sender, DirectoryRowChangeEvent e);
        
        public delegate void SectionRowChangeEventHandler(object sender, SectionRowChangeEvent e);
        
        public delegate void ValueRowChangeEventHandler(object sender, ValueRowChangeEvent e);
        
        public delegate void TupleDescriptorsRowChangeEventHandler(object sender, TupleDescriptorsRowChangeEvent e);
        
        public delegate void TupleDescriptorRowChangeEventHandler(object sender, TupleDescriptorRowChangeEvent e);
        
        public delegate void FieldRowChangeEventHandler(object sender, FieldRowChangeEvent e);
        
        public delegate void ModulesRowChangeEventHandler(object sender, ModulesRowChangeEvent e);
        
        public delegate void ModuleRowChangeEventHandler(object sender, ModuleRowChangeEvent e);
        
        public delegate void StreamsRowChangeEventHandler(object sender, StreamsRowChangeEvent e);
        
        public delegate void StreamRowChangeEventHandler(object sender, StreamRowChangeEvent e);
        
        public delegate void ConnectionRowChangeEventHandler(object sender, ConnectionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProgramDataTable : global::System.Data.TypedTableBase<ProgramRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramDataTable() {
                this.TableName = "Program";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProgramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow this[int index] {
                get {
                    return ((ProgramRow)(this.Rows[index]));
                }
            }
            
            public event ProgramRowChangeEventHandler ProgramRowChanging;
            
            public event ProgramRowChangeEventHandler ProgramRowChanged;
            
            public event ProgramRowChangeEventHandler ProgramRowDeleting;
            
            public event ProgramRowChangeEventHandler ProgramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProgramRow(ProgramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow AddProgramRow(string Name) {
                ProgramRow rowProgramRow = ((ProgramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        null};
                rowProgramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProgramRow);
                return rowProgramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProgramDataTable cln = ((ProgramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProgramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnProgram_Id = base.Columns["Program_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProgram_Id}, true));
                this.columnName.Namespace = "";
                this.columnProgram_Id.AutoIncrement = true;
                this.columnProgram_Id.AllowDBNull = false;
                this.columnProgram_Id.Unique = true;
                this.columnProgram_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow NewProgramRow() {
                return ((ProgramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProgramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProgramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProgramRowChanged != null)) {
                    this.ProgramRowChanged(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProgramRowChanging != null)) {
                    this.ProgramRowChanging(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProgramRowDeleted != null)) {
                    this.ProgramRowDeleted(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProgramRowDeleting != null)) {
                    this.ProgramRowDeleting(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProgramRow(ProgramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProgramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CompilerInfoDataTable : global::System.Data.TypedTableBase<CompilerInfoRow> {
            
            private global::System.Data.DataColumn columnCompilerInfo_Id;
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoDataTable() {
                this.TableName = "CompilerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CompilerInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CompilerInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompilerInfo_IdColumn {
                get {
                    return this.columnCompilerInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoRow this[int index] {
                get {
                    return ((CompilerInfoRow)(this.Rows[index]));
                }
            }
            
            public event CompilerInfoRowChangeEventHandler CompilerInfoRowChanging;
            
            public event CompilerInfoRowChangeEventHandler CompilerInfoRowChanged;
            
            public event CompilerInfoRowChangeEventHandler CompilerInfoRowDeleting;
            
            public event CompilerInfoRowChangeEventHandler CompilerInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCompilerInfoRow(CompilerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoRow AddCompilerInfoRow(ProgramRow parentProgramRowByProgram_CompilerInfo) {
                CompilerInfoRow rowCompilerInfoRow = ((CompilerInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentProgramRowByProgram_CompilerInfo != null)) {
                    columnValuesArray[1] = parentProgramRowByProgram_CompilerInfo[1];
                }
                rowCompilerInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCompilerInfoRow);
                return rowCompilerInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CompilerInfoDataTable cln = ((CompilerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CompilerInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompilerInfo_Id = base.Columns["CompilerInfo_Id"];
                this.columnProgram_Id = base.Columns["Program_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompilerInfo_Id = new global::System.Data.DataColumn("CompilerInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCompilerInfo_Id);
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompilerInfo_Id}, true));
                this.columnCompilerInfo_Id.AutoIncrement = true;
                this.columnCompilerInfo_Id.AllowDBNull = false;
                this.columnCompilerInfo_Id.Unique = true;
                this.columnCompilerInfo_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnProgram_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoRow NewCompilerInfoRow() {
                return ((CompilerInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CompilerInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CompilerInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompilerInfoRowChanged != null)) {
                    this.CompilerInfoRowChanged(this, new CompilerInfoRowChangeEvent(((CompilerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompilerInfoRowChanging != null)) {
                    this.CompilerInfoRowChanging(this, new CompilerInfoRowChangeEvent(((CompilerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompilerInfoRowDeleted != null)) {
                    this.CompilerInfoRowDeleted(this, new CompilerInfoRowChangeEvent(((CompilerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompilerInfoRowDeleting != null)) {
                    this.CompilerInfoRowDeleting(this, new CompilerInfoRowChangeEvent(((CompilerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCompilerInfoRow(CompilerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CompilerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItemDataTable : global::System.Data.TypedTableBase<ItemRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnItem_Text;
            
            private global::System.Data.DataColumn columnCompilerInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDataTable() {
                this.TableName = "Item";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Item_TextColumn {
                get {
                    return this.columnItem_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompilerInfo_IdColumn {
                get {
                    return this.columnCompilerInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow this[int index] {
                get {
                    return ((ItemRow)(this.Rows[index]));
                }
            }
            
            public event ItemRowChangeEventHandler ItemRowChanging;
            
            public event ItemRowChangeEventHandler ItemRowChanged;
            
            public event ItemRowChangeEventHandler ItemRowDeleting;
            
            public event ItemRowChangeEventHandler ItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItemRow(ItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow AddItemRow(string Name, string Item_Text, CompilerInfoRow parentCompilerInfoRowByCompilerInfo_Item) {
                ItemRow rowItemRow = ((ItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Item_Text,
                        null};
                if ((parentCompilerInfoRowByCompilerInfo_Item != null)) {
                    columnValuesArray[2] = parentCompilerInfoRowByCompilerInfo_Item[0];
                }
                rowItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowItemRow);
                return rowItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ItemDataTable cln = ((ItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnItem_Text = base.Columns["Item_Text"];
                this.columnCompilerInfo_Id = base.Columns["CompilerInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnItem_Text = new global::System.Data.DataColumn("Item_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnItem_Text);
                this.columnCompilerInfo_Id = new global::System.Data.DataColumn("CompilerInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCompilerInfo_Id);
                this.columnName.Namespace = "";
                this.columnCompilerInfo_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.ExtendedProperties.Add("Generator_RowClassName", "ItemRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ItemRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ItemRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "ItemDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Item");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableItem");
                this.ExtendedProperties.Add("Generator_UserTableName", "Item");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow NewItemRow() {
                return ((ItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemRowChanged != null)) {
                    this.ItemRowChanged(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemRowChanging != null)) {
                    this.ItemRowChanging(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemRowDeleted != null)) {
                    this.ItemRowDeleted(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemRowDeleting != null)) {
                    this.ItemRowDeleting(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItemRow(ItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DirectoryDataTable : global::System.Data.TypedTableBase<DirectoryRow> {
            
            private global::System.Data.DataColumn columnDirectory_Id;
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryDataTable() {
                this.TableName = "Directory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DirectoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DirectoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Directory_IdColumn {
                get {
                    return this.columnDirectory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryRow this[int index] {
                get {
                    return ((DirectoryRow)(this.Rows[index]));
                }
            }
            
            public event DirectoryRowChangeEventHandler DirectoryRowChanging;
            
            public event DirectoryRowChangeEventHandler DirectoryRowChanged;
            
            public event DirectoryRowChangeEventHandler DirectoryRowDeleting;
            
            public event DirectoryRowChangeEventHandler DirectoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDirectoryRow(DirectoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryRow AddDirectoryRow(ProgramRow parentProgramRowByProgram_Directory) {
                DirectoryRow rowDirectoryRow = ((DirectoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentProgramRowByProgram_Directory != null)) {
                    columnValuesArray[1] = parentProgramRowByProgram_Directory[1];
                }
                rowDirectoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDirectoryRow);
                return rowDirectoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DirectoryDataTable cln = ((DirectoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DirectoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDirectory_Id = base.Columns["Directory_Id"];
                this.columnProgram_Id = base.Columns["Program_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDirectory_Id = new global::System.Data.DataColumn("Directory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDirectory_Id);
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDirectory_Id}, true));
                this.columnDirectory_Id.AutoIncrement = true;
                this.columnDirectory_Id.AllowDBNull = false;
                this.columnDirectory_Id.Unique = true;
                this.columnDirectory_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnProgram_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryRow NewDirectoryRow() {
                return ((DirectoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DirectoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DirectoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DirectoryRowChanged != null)) {
                    this.DirectoryRowChanged(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DirectoryRowChanging != null)) {
                    this.DirectoryRowChanging(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DirectoryRowDeleted != null)) {
                    this.DirectoryRowDeleted(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DirectoryRowDeleting != null)) {
                    this.DirectoryRowDeleting(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDirectoryRow(DirectoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DirectoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SectionDataTable : global::System.Data.TypedTableBase<SectionRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnSection_Id;
            
            private global::System.Data.DataColumn columnDirectory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDataTable() {
                this.TableName = "Section";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Section_IdColumn {
                get {
                    return this.columnSection_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Directory_IdColumn {
                get {
                    return this.columnDirectory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow this[int index] {
                get {
                    return ((SectionRow)(this.Rows[index]));
                }
            }
            
            public event SectionRowChangeEventHandler SectionRowChanging;
            
            public event SectionRowChangeEventHandler SectionRowChanged;
            
            public event SectionRowChangeEventHandler SectionRowDeleting;
            
            public event SectionRowChangeEventHandler SectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSectionRow(SectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow AddSectionRow(string Name, DirectoryRow parentDirectoryRowByDirectory_Section) {
                SectionRow rowSectionRow = ((SectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        null,
                        null};
                if ((parentDirectoryRowByDirectory_Section != null)) {
                    columnValuesArray[2] = parentDirectoryRowByDirectory_Section[0];
                }
                rowSectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSectionRow);
                return rowSectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SectionDataTable cln = ((SectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnSection_Id = base.Columns["Section_Id"];
                this.columnDirectory_Id = base.Columns["Directory_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnSection_Id = new global::System.Data.DataColumn("Section_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSection_Id);
                this.columnDirectory_Id = new global::System.Data.DataColumn("Directory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDirectory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSection_Id}, true));
                this.columnName.Namespace = "";
                this.columnSection_Id.AutoIncrement = true;
                this.columnSection_Id.AllowDBNull = false;
                this.columnSection_Id.Unique = true;
                this.columnSection_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnDirectory_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow NewSectionRow() {
                return ((SectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SectionRowChanged != null)) {
                    this.SectionRowChanged(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SectionRowChanging != null)) {
                    this.SectionRowChanging(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SectionRowDeleted != null)) {
                    this.SectionRowDeleted(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SectionRowDeleting != null)) {
                    this.SectionRowDeleting(this, new SectionRowChangeEvent(((SectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSectionRow(SectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ValueDataTable : global::System.Data.TypedTableBase<ValueRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue_Text;
            
            private global::System.Data.DataColumn columnSection_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValueDataTable() {
                this.TableName = "Value";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value_TextColumn {
                get {
                    return this.columnValue_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Section_IdColumn {
                get {
                    return this.columnSection_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValueRow this[int index] {
                get {
                    return ((ValueRow)(this.Rows[index]));
                }
            }
            
            public event ValueRowChangeEventHandler ValueRowChanging;
            
            public event ValueRowChangeEventHandler ValueRowChanged;
            
            public event ValueRowChangeEventHandler ValueRowDeleting;
            
            public event ValueRowChangeEventHandler ValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddValueRow(ValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValueRow AddValueRow(string Name, string Value_Text, SectionRow parentSectionRowBySection_Value) {
                ValueRow rowValueRow = ((ValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Value_Text,
                        null};
                if ((parentSectionRowBySection_Value != null)) {
                    columnValuesArray[2] = parentSectionRowBySection_Value[1];
                }
                rowValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowValueRow);
                return rowValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ValueDataTable cln = ((ValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnValue_Text = base.Columns["Value_Text"];
                this.columnSection_Id = base.Columns["Section_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnValue_Text = new global::System.Data.DataColumn("Value_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnValue_Text);
                this.columnSection_Id = new global::System.Data.DataColumn("Section_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSection_Id);
                this.columnName.Namespace = "";
                this.columnSection_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValueRow NewValueRow() {
                return ((ValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ValueRowChanged != null)) {
                    this.ValueRowChanged(this, new ValueRowChangeEvent(((ValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ValueRowChanging != null)) {
                    this.ValueRowChanging(this, new ValueRowChangeEvent(((ValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ValueRowDeleted != null)) {
                    this.ValueRowDeleted(this, new ValueRowChangeEvent(((ValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ValueRowDeleting != null)) {
                    this.ValueRowDeleting(this, new ValueRowChangeEvent(((ValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveValueRow(ValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TupleDescriptorsDataTable : global::System.Data.TypedTableBase<TupleDescriptorsRow> {
            
            private global::System.Data.DataColumn columnTupleDescriptors_Id;
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsDataTable() {
                this.TableName = "TupleDescriptors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TupleDescriptorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TupleDescriptorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TupleDescriptors_IdColumn {
                get {
                    return this.columnTupleDescriptors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsRow this[int index] {
                get {
                    return ((TupleDescriptorsRow)(this.Rows[index]));
                }
            }
            
            public event TupleDescriptorsRowChangeEventHandler TupleDescriptorsRowChanging;
            
            public event TupleDescriptorsRowChangeEventHandler TupleDescriptorsRowChanged;
            
            public event TupleDescriptorsRowChangeEventHandler TupleDescriptorsRowDeleting;
            
            public event TupleDescriptorsRowChangeEventHandler TupleDescriptorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTupleDescriptorsRow(TupleDescriptorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsRow AddTupleDescriptorsRow(ProgramRow parentProgramRowByProgram_TupleDescriptors) {
                TupleDescriptorsRow rowTupleDescriptorsRow = ((TupleDescriptorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentProgramRowByProgram_TupleDescriptors != null)) {
                    columnValuesArray[1] = parentProgramRowByProgram_TupleDescriptors[1];
                }
                rowTupleDescriptorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTupleDescriptorsRow);
                return rowTupleDescriptorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TupleDescriptorsDataTable cln = ((TupleDescriptorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TupleDescriptorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTupleDescriptors_Id = base.Columns["TupleDescriptors_Id"];
                this.columnProgram_Id = base.Columns["Program_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTupleDescriptors_Id = new global::System.Data.DataColumn("TupleDescriptors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTupleDescriptors_Id);
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTupleDescriptors_Id}, true));
                this.columnTupleDescriptors_Id.AutoIncrement = true;
                this.columnTupleDescriptors_Id.AllowDBNull = false;
                this.columnTupleDescriptors_Id.Unique = true;
                this.columnTupleDescriptors_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnProgram_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsRow NewTupleDescriptorsRow() {
                return ((TupleDescriptorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TupleDescriptorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TupleDescriptorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TupleDescriptorsRowChanged != null)) {
                    this.TupleDescriptorsRowChanged(this, new TupleDescriptorsRowChangeEvent(((TupleDescriptorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TupleDescriptorsRowChanging != null)) {
                    this.TupleDescriptorsRowChanging(this, new TupleDescriptorsRowChangeEvent(((TupleDescriptorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TupleDescriptorsRowDeleted != null)) {
                    this.TupleDescriptorsRowDeleted(this, new TupleDescriptorsRowChangeEvent(((TupleDescriptorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TupleDescriptorsRowDeleting != null)) {
                    this.TupleDescriptorsRowDeleting(this, new TupleDescriptorsRowChangeEvent(((TupleDescriptorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTupleDescriptorsRow(TupleDescriptorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TupleDescriptorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TupleDescriptorDataTable : global::System.Data.TypedTableBase<TupleDescriptorRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnTupleDescriptor_Id;
            
            private global::System.Data.DataColumn columnTupleDescriptors_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorDataTable() {
                this.TableName = "TupleDescriptor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TupleDescriptorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TupleDescriptorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TupleDescriptor_IdColumn {
                get {
                    return this.columnTupleDescriptor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TupleDescriptors_IdColumn {
                get {
                    return this.columnTupleDescriptors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorRow this[int index] {
                get {
                    return ((TupleDescriptorRow)(this.Rows[index]));
                }
            }
            
            public event TupleDescriptorRowChangeEventHandler TupleDescriptorRowChanging;
            
            public event TupleDescriptorRowChangeEventHandler TupleDescriptorRowChanged;
            
            public event TupleDescriptorRowChangeEventHandler TupleDescriptorRowDeleting;
            
            public event TupleDescriptorRowChangeEventHandler TupleDescriptorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTupleDescriptorRow(TupleDescriptorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorRow AddTupleDescriptorRow(string Name, TupleDescriptorsRow parentTupleDescriptorsRowByTupleDescriptors_TupleDescriptor) {
                TupleDescriptorRow rowTupleDescriptorRow = ((TupleDescriptorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        null,
                        null};
                if ((parentTupleDescriptorsRowByTupleDescriptors_TupleDescriptor != null)) {
                    columnValuesArray[2] = parentTupleDescriptorsRowByTupleDescriptors_TupleDescriptor[0];
                }
                rowTupleDescriptorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTupleDescriptorRow);
                return rowTupleDescriptorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TupleDescriptorDataTable cln = ((TupleDescriptorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TupleDescriptorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnTupleDescriptor_Id = base.Columns["TupleDescriptor_Id"];
                this.columnTupleDescriptors_Id = base.Columns["TupleDescriptors_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnTupleDescriptor_Id = new global::System.Data.DataColumn("TupleDescriptor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTupleDescriptor_Id);
                this.columnTupleDescriptors_Id = new global::System.Data.DataColumn("TupleDescriptors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTupleDescriptors_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTupleDescriptor_Id}, true));
                this.columnName.Namespace = "";
                this.columnTupleDescriptor_Id.AutoIncrement = true;
                this.columnTupleDescriptor_Id.AllowDBNull = false;
                this.columnTupleDescriptor_Id.Unique = true;
                this.columnTupleDescriptor_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnTupleDescriptors_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorRow NewTupleDescriptorRow() {
                return ((TupleDescriptorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TupleDescriptorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TupleDescriptorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TupleDescriptorRowChanged != null)) {
                    this.TupleDescriptorRowChanged(this, new TupleDescriptorRowChangeEvent(((TupleDescriptorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TupleDescriptorRowChanging != null)) {
                    this.TupleDescriptorRowChanging(this, new TupleDescriptorRowChangeEvent(((TupleDescriptorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TupleDescriptorRowDeleted != null)) {
                    this.TupleDescriptorRowDeleted(this, new TupleDescriptorRowChangeEvent(((TupleDescriptorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TupleDescriptorRowDeleting != null)) {
                    this.TupleDescriptorRowDeleting(this, new TupleDescriptorRowChangeEvent(((TupleDescriptorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTupleDescriptorRow(TupleDescriptorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TupleDescriptorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FieldDataTable : global::System.Data.TypedTableBase<FieldRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnC8Type;
            
            private global::System.Data.DataColumn columnTupleDescriptor_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDataTable() {
                this.TableName = "Field";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FieldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C8TypeColumn {
                get {
                    return this.columnC8Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TupleDescriptor_IdColumn {
                get {
                    return this.columnTupleDescriptor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow this[int index] {
                get {
                    return ((FieldRow)(this.Rows[index]));
                }
            }
            
            public event FieldRowChangeEventHandler FieldRowChanging;
            
            public event FieldRowChangeEventHandler FieldRowChanged;
            
            public event FieldRowChangeEventHandler FieldRowDeleting;
            
            public event FieldRowChangeEventHandler FieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFieldRow(FieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow AddFieldRow(string Name, string C8Type, TupleDescriptorRow parentTupleDescriptorRowByTupleDescriptor_Field) {
                FieldRow rowFieldRow = ((FieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        C8Type,
                        null};
                if ((parentTupleDescriptorRowByTupleDescriptor_Field != null)) {
                    columnValuesArray[2] = parentTupleDescriptorRowByTupleDescriptor_Field[1];
                }
                rowFieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFieldRow);
                return rowFieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FieldDataTable cln = ((FieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnC8Type = base.Columns["C8Type"];
                this.columnTupleDescriptor_Id = base.Columns["TupleDescriptor_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnC8Type = new global::System.Data.DataColumn("C8Type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnC8Type);
                this.columnTupleDescriptor_Id = new global::System.Data.DataColumn("TupleDescriptor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTupleDescriptor_Id);
                this.columnName.Namespace = "";
                this.columnC8Type.Namespace = "";
                this.columnTupleDescriptor_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow NewFieldRow() {
                return ((FieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FieldRowChanged != null)) {
                    this.FieldRowChanged(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FieldRowChanging != null)) {
                    this.FieldRowChanging(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FieldRowDeleted != null)) {
                    this.FieldRowDeleted(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FieldRowDeleting != null)) {
                    this.FieldRowDeleting(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFieldRow(FieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModulesDataTable : global::System.Data.TypedTableBase<ModulesRow> {
            
            private global::System.Data.DataColumn columnModules_Id;
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesDataTable() {
                this.TableName = "Modules";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModulesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModulesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Modules_IdColumn {
                get {
                    return this.columnModules_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesRow this[int index] {
                get {
                    return ((ModulesRow)(this.Rows[index]));
                }
            }
            
            public event ModulesRowChangeEventHandler ModulesRowChanging;
            
            public event ModulesRowChangeEventHandler ModulesRowChanged;
            
            public event ModulesRowChangeEventHandler ModulesRowDeleting;
            
            public event ModulesRowChangeEventHandler ModulesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModulesRow(ModulesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesRow AddModulesRow(ProgramRow parentProgramRowByProgram_Modules) {
                ModulesRow rowModulesRow = ((ModulesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentProgramRowByProgram_Modules != null)) {
                    columnValuesArray[1] = parentProgramRowByProgram_Modules[1];
                }
                rowModulesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModulesRow);
                return rowModulesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModulesDataTable cln = ((ModulesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModulesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModules_Id = base.Columns["Modules_Id"];
                this.columnProgram_Id = base.Columns["Program_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModules_Id = new global::System.Data.DataColumn("Modules_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModules_Id);
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnModules_Id}, true));
                this.columnModules_Id.AutoIncrement = true;
                this.columnModules_Id.AllowDBNull = false;
                this.columnModules_Id.Unique = true;
                this.columnModules_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnProgram_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesRow NewModulesRow() {
                return ((ModulesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModulesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModulesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModulesRowChanged != null)) {
                    this.ModulesRowChanged(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModulesRowChanging != null)) {
                    this.ModulesRowChanging(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModulesRowDeleted != null)) {
                    this.ModulesRowDeleted(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModulesRowDeleting != null)) {
                    this.ModulesRowDeleting(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModulesRow(ModulesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModulesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModuleDataTable : global::System.Data.TypedTableBase<ModuleRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnC8Type;
            
            private global::System.Data.DataColumn columnDebugMode;
            
            private global::System.Data.DataColumn columnModule_Id;
            
            private global::System.Data.DataColumn columnModules_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDataTable() {
                this.TableName = "Module";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModuleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModuleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C8TypeColumn {
                get {
                    return this.columnC8Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebugModeColumn {
                get {
                    return this.columnDebugMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Module_IdColumn {
                get {
                    return this.columnModule_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Modules_IdColumn {
                get {
                    return this.columnModules_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow this[int index] {
                get {
                    return ((ModuleRow)(this.Rows[index]));
                }
            }
            
            public event ModuleRowChangeEventHandler ModuleRowChanging;
            
            public event ModuleRowChangeEventHandler ModuleRowChanged;
            
            public event ModuleRowChangeEventHandler ModuleRowDeleting;
            
            public event ModuleRowChangeEventHandler ModuleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModuleRow(ModuleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow AddModuleRow(string Name, string C8Type, string DebugMode, ModulesRow parentModulesRowByModules_Module) {
                ModuleRow rowModuleRow = ((ModuleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        C8Type,
                        DebugMode,
                        null,
                        null};
                if ((parentModulesRowByModules_Module != null)) {
                    columnValuesArray[4] = parentModulesRowByModules_Module[0];
                }
                rowModuleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModuleRow);
                return rowModuleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModuleDataTable cln = ((ModuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModuleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnC8Type = base.Columns["C8Type"];
                this.columnDebugMode = base.Columns["DebugMode"];
                this.columnModule_Id = base.Columns["Module_Id"];
                this.columnModules_Id = base.Columns["Modules_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnC8Type = new global::System.Data.DataColumn("C8Type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnC8Type);
                this.columnDebugMode = new global::System.Data.DataColumn("DebugMode", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDebugMode);
                this.columnModule_Id = new global::System.Data.DataColumn("Module_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModule_Id);
                this.columnModules_Id = new global::System.Data.DataColumn("Modules_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModules_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnModule_Id}, true));
                this.columnName.Namespace = "";
                this.columnC8Type.Namespace = "";
                this.columnDebugMode.Namespace = "";
                this.columnModule_Id.AutoIncrement = true;
                this.columnModule_Id.AllowDBNull = false;
                this.columnModule_Id.Unique = true;
                this.columnModule_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnModules_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow NewModuleRow() {
                return ((ModuleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModuleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModuleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModuleRowChanged != null)) {
                    this.ModuleRowChanged(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModuleRowChanging != null)) {
                    this.ModuleRowChanging(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModuleRowDeleted != null)) {
                    this.ModuleRowDeleted(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModuleRowDeleting != null)) {
                    this.ModuleRowDeleting(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModuleRow(ModuleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModuleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StreamsDataTable : global::System.Data.TypedTableBase<StreamsRow> {
            
            private global::System.Data.DataColumn columnStreams_Id;
            
            private global::System.Data.DataColumn columnModule_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsDataTable() {
                this.TableName = "Streams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StreamsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StreamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Streams_IdColumn {
                get {
                    return this.columnStreams_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Module_IdColumn {
                get {
                    return this.columnModule_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsRow this[int index] {
                get {
                    return ((StreamsRow)(this.Rows[index]));
                }
            }
            
            public event StreamsRowChangeEventHandler StreamsRowChanging;
            
            public event StreamsRowChangeEventHandler StreamsRowChanged;
            
            public event StreamsRowChangeEventHandler StreamsRowDeleting;
            
            public event StreamsRowChangeEventHandler StreamsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStreamsRow(StreamsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsRow AddStreamsRow(ModuleRow parentModuleRowByModule_Streams) {
                StreamsRow rowStreamsRow = ((StreamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentModuleRowByModule_Streams != null)) {
                    columnValuesArray[1] = parentModuleRowByModule_Streams[3];
                }
                rowStreamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStreamsRow);
                return rowStreamsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StreamsDataTable cln = ((StreamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StreamsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStreams_Id = base.Columns["Streams_Id"];
                this.columnModule_Id = base.Columns["Module_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStreams_Id = new global::System.Data.DataColumn("Streams_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStreams_Id);
                this.columnModule_Id = new global::System.Data.DataColumn("Module_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModule_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStreams_Id}, true));
                this.columnStreams_Id.AutoIncrement = true;
                this.columnStreams_Id.AllowDBNull = false;
                this.columnStreams_Id.Unique = true;
                this.columnStreams_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnModule_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsRow NewStreamsRow() {
                return ((StreamsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StreamsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StreamsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StreamsRowChanged != null)) {
                    this.StreamsRowChanged(this, new StreamsRowChangeEvent(((StreamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StreamsRowChanging != null)) {
                    this.StreamsRowChanging(this, new StreamsRowChangeEvent(((StreamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StreamsRowDeleted != null)) {
                    this.StreamsRowDeleted(this, new StreamsRowChangeEvent(((StreamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StreamsRowDeleting != null)) {
                    this.StreamsRowDeleting(this, new StreamsRowChangeEvent(((StreamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStreamsRow(StreamsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StreamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StreamDataTable : global::System.Data.TypedTableBase<StreamRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnTupleDescriptorRef;
            
            private global::System.Data.DataColumn columnSetServerTimestamp;
            
            private global::System.Data.DataColumn columnStream_Id;
            
            private global::System.Data.DataColumn columnStreams_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamDataTable() {
                this.TableName = "Stream";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StreamDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StreamDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TupleDescriptorRefColumn {
                get {
                    return this.columnTupleDescriptorRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetServerTimestampColumn {
                get {
                    return this.columnSetServerTimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Stream_IdColumn {
                get {
                    return this.columnStream_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Streams_IdColumn {
                get {
                    return this.columnStreams_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamRow this[int index] {
                get {
                    return ((StreamRow)(this.Rows[index]));
                }
            }
            
            public event StreamRowChangeEventHandler StreamRowChanging;
            
            public event StreamRowChangeEventHandler StreamRowChanged;
            
            public event StreamRowChangeEventHandler StreamRowDeleting;
            
            public event StreamRowChangeEventHandler StreamRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStreamRow(StreamRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamRow AddStreamRow(string Name, string TupleDescriptorRef, string SetServerTimestamp, StreamsRow parentStreamsRowByStreams_Stream) {
                StreamRow rowStreamRow = ((StreamRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        TupleDescriptorRef,
                        SetServerTimestamp,
                        null,
                        null};
                if ((parentStreamsRowByStreams_Stream != null)) {
                    columnValuesArray[4] = parentStreamsRowByStreams_Stream[0];
                }
                rowStreamRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStreamRow);
                return rowStreamRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StreamDataTable cln = ((StreamDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StreamDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnTupleDescriptorRef = base.Columns["TupleDescriptorRef"];
                this.columnSetServerTimestamp = base.Columns["SetServerTimestamp"];
                this.columnStream_Id = base.Columns["Stream_Id"];
                this.columnStreams_Id = base.Columns["Streams_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnTupleDescriptorRef = new global::System.Data.DataColumn("TupleDescriptorRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTupleDescriptorRef);
                this.columnSetServerTimestamp = new global::System.Data.DataColumn("SetServerTimestamp", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSetServerTimestamp);
                this.columnStream_Id = new global::System.Data.DataColumn("Stream_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStream_Id);
                this.columnStreams_Id = new global::System.Data.DataColumn("Streams_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStreams_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStream_Id}, true));
                this.columnName.Namespace = "";
                this.columnTupleDescriptorRef.Namespace = "";
                this.columnSetServerTimestamp.Namespace = "";
                this.columnStream_Id.AutoIncrement = true;
                this.columnStream_Id.AllowDBNull = false;
                this.columnStream_Id.Unique = true;
                this.columnStream_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
                this.columnStreams_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamRow NewStreamRow() {
                return ((StreamRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StreamRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StreamRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StreamRowChanged != null)) {
                    this.StreamRowChanged(this, new StreamRowChangeEvent(((StreamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StreamRowChanging != null)) {
                    this.StreamRowChanging(this, new StreamRowChangeEvent(((StreamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StreamRowDeleted != null)) {
                    this.StreamRowDeleted(this, new StreamRowChangeEvent(((StreamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StreamRowDeleting != null)) {
                    this.StreamRowDeleting(this, new StreamRowChangeEvent(((StreamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStreamRow(StreamRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StreamDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConnectionDataTable : global::System.Data.TypedTableBase<ConnectionRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnURI;
            
            private global::System.Data.DataColumn columnDirection;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnStream_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionDataTable() {
                this.TableName = "Connection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConnectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn URIColumn {
                get {
                    return this.columnURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Stream_IdColumn {
                get {
                    return this.columnStream_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow this[int index] {
                get {
                    return ((ConnectionRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionRowChangeEventHandler ConnectionRowChanging;
            
            public event ConnectionRowChangeEventHandler ConnectionRowChanged;
            
            public event ConnectionRowChangeEventHandler ConnectionRowDeleting;
            
            public event ConnectionRowChangeEventHandler ConnectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConnectionRow(ConnectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow AddConnectionRow(string Name, string URI, string Direction, string Type, StreamRow parentStreamRowByStream_Connection) {
                ConnectionRow rowConnectionRow = ((ConnectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        URI,
                        Direction,
                        Type,
                        null};
                if ((parentStreamRowByStream_Connection != null)) {
                    columnValuesArray[4] = parentStreamRowByStream_Connection[3];
                }
                rowConnectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConnectionRow);
                return rowConnectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConnectionDataTable cln = ((ConnectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConnectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnURI = base.Columns["URI"];
                this.columnDirection = base.Columns["Direction"];
                this.columnType = base.Columns["Type"];
                this.columnStream_Id = base.Columns["Stream_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnURI = new global::System.Data.DataColumn("URI", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnURI);
                this.columnDirection = new global::System.Data.DataColumn("Direction", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirection);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnStream_Id = new global::System.Data.DataColumn("Stream_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStream_Id);
                this.columnName.Namespace = "";
                this.columnURI.Namespace = "";
                this.columnDirection.Namespace = "";
                this.columnType.Namespace = "";
                this.columnStream_Id.Namespace = "http://www.coral8.com/cpx/2004/03/";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow NewConnectionRow() {
                return ((ConnectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConnectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConnectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionRowChanged != null)) {
                    this.ConnectionRowChanged(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionRowChanging != null)) {
                    this.ConnectionRowChanging(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionRowDeleted != null)) {
                    this.ConnectionRowDeleted(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionRowDeleting != null)) {
                    this.ConnectionRowDeleting(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConnectionRow(ConnectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CCXDataSet ds = new CCXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConnectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProgramRow : global::System.Data.DataRow {
            
            private ProgramDataTable tableProgram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProgram = ((ProgramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableProgram.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Program\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgram.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    return ((int)(this[this.tableProgram.Program_IdColumn]));
                }
                set {
                    this[this.tableProgram.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableProgram.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableProgram.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoRow[] GetCompilerInfoRows() {
                if ((this.Table.ChildRelations["Program_CompilerInfo"] == null)) {
                    return new CompilerInfoRow[0];
                }
                else {
                    return ((CompilerInfoRow[])(base.GetChildRows(this.Table.ChildRelations["Program_CompilerInfo"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryRow[] GetDirectoryRows() {
                if ((this.Table.ChildRelations["Program_Directory"] == null)) {
                    return new DirectoryRow[0];
                }
                else {
                    return ((DirectoryRow[])(base.GetChildRows(this.Table.ChildRelations["Program_Directory"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsRow[] GetTupleDescriptorsRows() {
                if ((this.Table.ChildRelations["Program_TupleDescriptors"] == null)) {
                    return new TupleDescriptorsRow[0];
                }
                else {
                    return ((TupleDescriptorsRow[])(base.GetChildRows(this.Table.ChildRelations["Program_TupleDescriptors"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesRow[] GetModulesRows() {
                if ((this.Table.ChildRelations["Program_Modules"] == null)) {
                    return new ModulesRow[0];
                }
                else {
                    return ((ModulesRow[])(base.GetChildRows(this.Table.ChildRelations["Program_Modules"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CompilerInfoRow : global::System.Data.DataRow {
            
            private CompilerInfoDataTable tableCompilerInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CompilerInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompilerInfo = ((CompilerInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompilerInfo_Id {
                get {
                    return ((int)(this[this.tableCompilerInfo.CompilerInfo_IdColumn]));
                }
                set {
                    this[this.tableCompilerInfo.CompilerInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    try {
                        return ((int)(this[this.tableCompilerInfo.Program_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Program_Id\' in table \'CompilerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompilerInfo.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow ProgramRow {
                get {
                    return ((ProgramRow)(this.GetParentRow(this.Table.ParentRelations["Program_CompilerInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Program_CompilerInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgram_IdNull() {
                return this.IsNull(this.tableCompilerInfo.Program_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgram_IdNull() {
                this[this.tableCompilerInfo.Program_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow[] GetItemRows() {
                if ((this.Table.ChildRelations["CompilerInfo_Item"] == null)) {
                    return new ItemRow[0];
                }
                else {
                    return ((ItemRow[])(base.GetChildRows(this.Table.ChildRelations["CompilerInfo_Item"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItemRow : global::System.Data.DataRow {
            
            private ItemDataTable tableItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItem = ((ItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableItem.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Item_Text {
                get {
                    try {
                        return ((string)(this[this.tableItem.Item_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Item_Text\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.Item_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompilerInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableItem.CompilerInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompilerInfo_Id\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.CompilerInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoRow CompilerInfoRow {
                get {
                    return ((CompilerInfoRow)(this.GetParentRow(this.Table.ParentRelations["CompilerInfo_Item"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CompilerInfo_Item"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableItem.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableItem.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItem_TextNull() {
                return this.IsNull(this.tableItem.Item_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItem_TextNull() {
                this[this.tableItem.Item_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompilerInfo_IdNull() {
                return this.IsNull(this.tableItem.CompilerInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompilerInfo_IdNull() {
                this[this.tableItem.CompilerInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DirectoryRow : global::System.Data.DataRow {
            
            private DirectoryDataTable tableDirectory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DirectoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDirectory = ((DirectoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Directory_Id {
                get {
                    return ((int)(this[this.tableDirectory.Directory_IdColumn]));
                }
                set {
                    this[this.tableDirectory.Directory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    try {
                        return ((int)(this[this.tableDirectory.Program_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Program_Id\' in table \'Directory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectory.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow ProgramRow {
                get {
                    return ((ProgramRow)(this.GetParentRow(this.Table.ParentRelations["Program_Directory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Program_Directory"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgram_IdNull() {
                return this.IsNull(this.tableDirectory.Program_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgram_IdNull() {
                this[this.tableDirectory.Program_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow[] GetSectionRows() {
                if ((this.Table.ChildRelations["Directory_Section"] == null)) {
                    return new SectionRow[0];
                }
                else {
                    return ((SectionRow[])(base.GetChildRows(this.Table.ChildRelations["Directory_Section"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SectionRow : global::System.Data.DataRow {
            
            private SectionDataTable tableSection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSection = ((SectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSection.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Section\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSection.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Section_Id {
                get {
                    return ((int)(this[this.tableSection.Section_IdColumn]));
                }
                set {
                    this[this.tableSection.Section_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Directory_Id {
                get {
                    try {
                        return ((int)(this[this.tableSection.Directory_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Directory_Id\' in table \'Section\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSection.Directory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryRow DirectoryRow {
                get {
                    return ((DirectoryRow)(this.GetParentRow(this.Table.ParentRelations["Directory_Section"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Directory_Section"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableSection.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableSection.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectory_IdNull() {
                return this.IsNull(this.tableSection.Directory_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectory_IdNull() {
                this[this.tableSection.Directory_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValueRow[] GetValueRows() {
                if ((this.Table.ChildRelations["Section_Value"] == null)) {
                    return new ValueRow[0];
                }
                else {
                    return ((ValueRow[])(base.GetChildRows(this.Table.ChildRelations["Section_Value"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ValueRow : global::System.Data.DataRow {
            
            private ValueDataTable tableValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableValue = ((ValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableValue.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Value\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableValue.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value_Text {
                get {
                    try {
                        return ((string)(this[this.tableValue.Value_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value_Text\' in table \'Value\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableValue.Value_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Section_Id {
                get {
                    try {
                        return ((int)(this[this.tableValue.Section_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Section_Id\' in table \'Value\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableValue.Section_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow SectionRow {
                get {
                    return ((SectionRow)(this.GetParentRow(this.Table.ParentRelations["Section_Value"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Section_Value"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableValue.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableValue.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue_TextNull() {
                return this.IsNull(this.tableValue.Value_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue_TextNull() {
                this[this.tableValue.Value_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSection_IdNull() {
                return this.IsNull(this.tableValue.Section_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSection_IdNull() {
                this[this.tableValue.Section_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TupleDescriptorsRow : global::System.Data.DataRow {
            
            private TupleDescriptorsDataTable tableTupleDescriptors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TupleDescriptorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTupleDescriptors = ((TupleDescriptorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TupleDescriptors_Id {
                get {
                    return ((int)(this[this.tableTupleDescriptors.TupleDescriptors_IdColumn]));
                }
                set {
                    this[this.tableTupleDescriptors.TupleDescriptors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    try {
                        return ((int)(this[this.tableTupleDescriptors.Program_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Program_Id\' in table \'TupleDescriptors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTupleDescriptors.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow ProgramRow {
                get {
                    return ((ProgramRow)(this.GetParentRow(this.Table.ParentRelations["Program_TupleDescriptors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Program_TupleDescriptors"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgram_IdNull() {
                return this.IsNull(this.tableTupleDescriptors.Program_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgram_IdNull() {
                this[this.tableTupleDescriptors.Program_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorRow[] GetTupleDescriptorRows() {
                if ((this.Table.ChildRelations["TupleDescriptors_TupleDescriptor"] == null)) {
                    return new TupleDescriptorRow[0];
                }
                else {
                    return ((TupleDescriptorRow[])(base.GetChildRows(this.Table.ChildRelations["TupleDescriptors_TupleDescriptor"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TupleDescriptorRow : global::System.Data.DataRow {
            
            private TupleDescriptorDataTable tableTupleDescriptor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TupleDescriptorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTupleDescriptor = ((TupleDescriptorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableTupleDescriptor.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'TupleDescriptor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTupleDescriptor.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TupleDescriptor_Id {
                get {
                    return ((int)(this[this.tableTupleDescriptor.TupleDescriptor_IdColumn]));
                }
                set {
                    this[this.tableTupleDescriptor.TupleDescriptor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TupleDescriptors_Id {
                get {
                    try {
                        return ((int)(this[this.tableTupleDescriptor.TupleDescriptors_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TupleDescriptors_Id\' in table \'TupleDescriptor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTupleDescriptor.TupleDescriptors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsRow TupleDescriptorsRow {
                get {
                    return ((TupleDescriptorsRow)(this.GetParentRow(this.Table.ParentRelations["TupleDescriptors_TupleDescriptor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TupleDescriptors_TupleDescriptor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableTupleDescriptor.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableTupleDescriptor.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTupleDescriptors_IdNull() {
                return this.IsNull(this.tableTupleDescriptor.TupleDescriptors_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTupleDescriptors_IdNull() {
                this[this.tableTupleDescriptor.TupleDescriptors_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow[] GetFieldRows() {
                if ((this.Table.ChildRelations["TupleDescriptor_Field"] == null)) {
                    return new FieldRow[0];
                }
                else {
                    return ((FieldRow[])(base.GetChildRows(this.Table.ChildRelations["TupleDescriptor_Field"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FieldRow : global::System.Data.DataRow {
            
            private FieldDataTable tableField;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableField = ((FieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableField.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Field\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableField.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C8Type {
                get {
                    try {
                        return ((string)(this[this.tableField.C8TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C8Type\' in table \'Field\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableField.C8TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TupleDescriptor_Id {
                get {
                    try {
                        return ((int)(this[this.tableField.TupleDescriptor_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TupleDescriptor_Id\' in table \'Field\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableField.TupleDescriptor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorRow TupleDescriptorRow {
                get {
                    return ((TupleDescriptorRow)(this.GetParentRow(this.Table.ParentRelations["TupleDescriptor_Field"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TupleDescriptor_Field"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableField.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableField.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC8TypeNull() {
                return this.IsNull(this.tableField.C8TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC8TypeNull() {
                this[this.tableField.C8TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTupleDescriptor_IdNull() {
                return this.IsNull(this.tableField.TupleDescriptor_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTupleDescriptor_IdNull() {
                this[this.tableField.TupleDescriptor_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModulesRow : global::System.Data.DataRow {
            
            private ModulesDataTable tableModules;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModulesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModules = ((ModulesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Modules_Id {
                get {
                    return ((int)(this[this.tableModules.Modules_IdColumn]));
                }
                set {
                    this[this.tableModules.Modules_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    try {
                        return ((int)(this[this.tableModules.Program_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Program_Id\' in table \'Modules\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModules.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow ProgramRow {
                get {
                    return ((ProgramRow)(this.GetParentRow(this.Table.ParentRelations["Program_Modules"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Program_Modules"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgram_IdNull() {
                return this.IsNull(this.tableModules.Program_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgram_IdNull() {
                this[this.tableModules.Program_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow[] GetModuleRows() {
                if ((this.Table.ChildRelations["Modules_Module"] == null)) {
                    return new ModuleRow[0];
                }
                else {
                    return ((ModuleRow[])(base.GetChildRows(this.Table.ChildRelations["Modules_Module"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModuleRow : global::System.Data.DataRow {
            
            private ModuleDataTable tableModule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModuleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModule = ((ModuleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableModule.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C8Type {
                get {
                    try {
                        return ((string)(this[this.tableModule.C8TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C8Type\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.C8TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DebugMode {
                get {
                    try {
                        return ((string)(this[this.tableModule.DebugModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebugMode\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.DebugModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Module_Id {
                get {
                    return ((int)(this[this.tableModule.Module_IdColumn]));
                }
                set {
                    this[this.tableModule.Module_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Modules_Id {
                get {
                    try {
                        return ((int)(this[this.tableModule.Modules_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modules_Id\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.Modules_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesRow ModulesRow {
                get {
                    return ((ModulesRow)(this.GetParentRow(this.Table.ParentRelations["Modules_Module"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Modules_Module"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableModule.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableModule.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC8TypeNull() {
                return this.IsNull(this.tableModule.C8TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC8TypeNull() {
                this[this.tableModule.C8TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebugModeNull() {
                return this.IsNull(this.tableModule.DebugModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebugModeNull() {
                this[this.tableModule.DebugModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModules_IdNull() {
                return this.IsNull(this.tableModule.Modules_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModules_IdNull() {
                this[this.tableModule.Modules_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsRow[] GetStreamsRows() {
                if ((this.Table.ChildRelations["Module_Streams"] == null)) {
                    return new StreamsRow[0];
                }
                else {
                    return ((StreamsRow[])(base.GetChildRows(this.Table.ChildRelations["Module_Streams"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StreamsRow : global::System.Data.DataRow {
            
            private StreamsDataTable tableStreams;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StreamsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStreams = ((StreamsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Streams_Id {
                get {
                    return ((int)(this[this.tableStreams.Streams_IdColumn]));
                }
                set {
                    this[this.tableStreams.Streams_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Module_Id {
                get {
                    try {
                        return ((int)(this[this.tableStreams.Module_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Module_Id\' in table \'Streams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreams.Module_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow ModuleRow {
                get {
                    return ((ModuleRow)(this.GetParentRow(this.Table.ParentRelations["Module_Streams"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Module_Streams"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModule_IdNull() {
                return this.IsNull(this.tableStreams.Module_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModule_IdNull() {
                this[this.tableStreams.Module_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamRow[] GetStreamRows() {
                if ((this.Table.ChildRelations["Streams_Stream"] == null)) {
                    return new StreamRow[0];
                }
                else {
                    return ((StreamRow[])(base.GetChildRows(this.Table.ChildRelations["Streams_Stream"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StreamRow : global::System.Data.DataRow {
            
            private StreamDataTable tableStream;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StreamRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStream = ((StreamDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableStream.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Stream\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStream.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TupleDescriptorRef {
                get {
                    try {
                        return ((string)(this[this.tableStream.TupleDescriptorRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TupleDescriptorRef\' in table \'Stream\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStream.TupleDescriptorRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetServerTimestamp {
                get {
                    try {
                        return ((string)(this[this.tableStream.SetServerTimestampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SetServerTimestamp\' in table \'Stream\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStream.SetServerTimestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Stream_Id {
                get {
                    return ((int)(this[this.tableStream.Stream_IdColumn]));
                }
                set {
                    this[this.tableStream.Stream_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Streams_Id {
                get {
                    try {
                        return ((int)(this[this.tableStream.Streams_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Streams_Id\' in table \'Stream\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStream.Streams_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsRow StreamsRow {
                get {
                    return ((StreamsRow)(this.GetParentRow(this.Table.ParentRelations["Streams_Stream"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Streams_Stream"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableStream.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableStream.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTupleDescriptorRefNull() {
                return this.IsNull(this.tableStream.TupleDescriptorRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTupleDescriptorRefNull() {
                this[this.tableStream.TupleDescriptorRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetServerTimestampNull() {
                return this.IsNull(this.tableStream.SetServerTimestampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetServerTimestampNull() {
                this[this.tableStream.SetServerTimestampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreams_IdNull() {
                return this.IsNull(this.tableStream.Streams_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreams_IdNull() {
                this[this.tableStream.Streams_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow[] GetConnectionRows() {
                if ((this.Table.ChildRelations["Stream_Connection"] == null)) {
                    return new ConnectionRow[0];
                }
                else {
                    return ((ConnectionRow[])(base.GetChildRows(this.Table.ChildRelations["Stream_Connection"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConnectionRow : global::System.Data.DataRow {
            
            private ConnectionDataTable tableConnection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnection = ((ConnectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableConnection.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Connection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnection.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string URI {
                get {
                    try {
                        return ((string)(this[this.tableConnection.URIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'URI\' in table \'Connection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnection.URIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direction {
                get {
                    try {
                        return ((string)(this[this.tableConnection.DirectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Direction\' in table \'Connection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnection.DirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableConnection.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'Connection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnection.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Stream_Id {
                get {
                    try {
                        return ((int)(this[this.tableConnection.Stream_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stream_Id\' in table \'Connection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnection.Stream_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamRow StreamRow {
                get {
                    return ((StreamRow)(this.GetParentRow(this.Table.ParentRelations["Stream_Connection"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Stream_Connection"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableConnection.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableConnection.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsURINull() {
                return this.IsNull(this.tableConnection.URIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetURINull() {
                this[this.tableConnection.URIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectionNull() {
                return this.IsNull(this.tableConnection.DirectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectionNull() {
                this[this.tableConnection.DirectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableConnection.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableConnection.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStream_IdNull() {
                return this.IsNull(this.tableConnection.Stream_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStream_IdNull() {
                this[this.tableConnection.Stream_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProgramRowChangeEvent : global::System.EventArgs {
            
            private ProgramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRowChangeEvent(ProgramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CompilerInfoRowChangeEvent : global::System.EventArgs {
            
            private CompilerInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoRowChangeEvent(CompilerInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompilerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItemRowChangeEvent : global::System.EventArgs {
            
            private ItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRowChangeEvent(ItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DirectoryRowChangeEvent : global::System.EventArgs {
            
            private DirectoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryRowChangeEvent(DirectoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SectionRowChangeEvent : global::System.EventArgs {
            
            private SectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRowChangeEvent(SectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ValueRowChangeEvent : global::System.EventArgs {
            
            private ValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValueRowChangeEvent(ValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TupleDescriptorsRowChangeEvent : global::System.EventArgs {
            
            private TupleDescriptorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsRowChangeEvent(TupleDescriptorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TupleDescriptorRowChangeEvent : global::System.EventArgs {
            
            private TupleDescriptorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorRowChangeEvent(TupleDescriptorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TupleDescriptorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FieldRowChangeEvent : global::System.EventArgs {
            
            private FieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRowChangeEvent(FieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModulesRowChangeEvent : global::System.EventArgs {
            
            private ModulesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesRowChangeEvent(ModulesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModulesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModuleRowChangeEvent : global::System.EventArgs {
            
            private ModuleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRowChangeEvent(ModuleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StreamsRowChangeEvent : global::System.EventArgs {
            
            private StreamsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsRowChangeEvent(StreamsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StreamRowChangeEvent : global::System.EventArgs {
            
            private StreamRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamRowChangeEvent(StreamRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StreamRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConnectionRowChangeEvent : global::System.EventArgs {
            
            private ConnectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRowChangeEvent(ConnectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591